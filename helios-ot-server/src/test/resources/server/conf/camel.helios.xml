<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jms="http://www.springframework.org/schema/jms"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xmlns:lang="http://www.springframework.org/schema/lang"       
       xsi:schemaLocation="
       http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms.xsd
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
       http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang.xsd
       "  >
	
	<bean id="traceFormatter" class="org.apache.camel.processor.interceptor.DefaultTraceFormatter">
		<property name="showProperties" value="true"/>
		<property name="showHeaders" value="true"/>
		<property name="showRouteId" value="true" />
	</bean>
	
	<context:annotation-config/>
	<context:mbean-export/>
	
  	
  	<camel:threadPool id="MetricInputStreamThreadPool" poolSize="5" threadName="MetricsInThread" maxPoolSize="10" maxQueueSize="1000" />
  	
	<bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent">
      <property name="brokerURL" value="vm://helios?create=false"/>
   	</bean>

	
      
   	
   	
   	
   	

   	<bean id="traceArraySplitter" class="org.helios.server.ot.jms.pubsub.TraceMessageSplitter" />

	<bean id="subPatternListener" class="org.helios.server.ot.jms.pubsub.SubListener" />
   	
   	<bean id="traceHandler" class="org.helios.server.ot.jms.pubsub.TopicTreeRepublisher">
   		<constructor-arg ref="senderTemplate" />
   		<constructor-arg value="helios.metrictree" />
   		<constructor-arg value="activemq:topic" />
   	</bean>
   	
   	<bean id="OTLocalEndpoint" class="org.helios.server.ot.endpoint.local.LocalEndpoint">   		
   		<constructor-arg value="seda:otlocal" />
   	</bean>
   	
   	<bean id="senderTemplate" class="org.apache.camel.impl.DefaultProducerTemplate" init-method="start" destroy-method="stop" >
   		<constructor-arg ref="HeliosContext"/>
   		<constructor-arg ref="MetricInputStreamThreadPool"/>
   	</bean>
   	
   	<bean id="metaCache" class="org.helios.server.ot.cache.MetaCacheProcessor" depends-on="ehcache" />
   	<bean id="jsonDriver" class="com.thoughtworks.xstream.io.json.JsonHierarchicalStreamDriver"/>
   	<bean id="jettisonDriver" class="com.thoughtworks.xstream.io.json.JettisonMappedXmlDriver"/>
   	
   	
	<bean id="OTXStreamDataFormatJSON" class="org.helios.server.ot.session.camel.transform.trace.AnnotationProcessingJsonDataFormat" scope="prototype" lazy-init="true" />
	<bean id="OTXStreamDataFormatXML" class="org.helios.server.ot.session.camel.transform.trace.AnnotationProcessingXMLDataFormat" scope="prototype" lazy-init="true" />
	
	<bean id="SubscriberRouteRegistry" class="org.helios.server.ot.session.camel.routing.SubscriberRouteRegistry" lazy-init="true" depends-on="heliosAmqBroker" >

	</bean>
	
	
	<!-- 
	<util:constant static-field="org.helios.server.ot.session.OutputFormatNames.TEXT_NAME" id="OUTPUT_TEXT" />
	<util:constant static-field="org.helios.server.ot.session.OutputFormatNames.JSON_NAME" id="OUTPUT_JSON" />
	<util:constant static-field="org.helios.server.ot.session.OutputFormatNames.XML_NAME" id="OUTPUT_XML" />
	<util:constant static-field="org.helios.server.ot.session.OutputFormatNames.JAVA_NAME" id="OUTPUT_JAVA" />	
	 -->   	
	 
	 <bean id="JSONDataFormat" class="org.helios.server.ot.session.camel.marshal.JaxbJsonMarshalingProvider" scope="singleton">
	 	<property name="replacers">
	 		<map>
	 			<entry key="javax.management.ObjectName">
	 				<bean id="JMXObjectNameReplacer" class="org.helios.server.ot.session.camel.marshal.custom.ObjectNameReplacer" />
	 			</entry>
	 		</map>
	 	</property>
	 </bean>
   	
	<camelContext xmlns="http://camel.apache.org/schema/spring" trace="true" id="HeliosContext" depends-on="SubscriberRouteRegistry" >
		<camel:dataFormats>
			<camel:string id="OTStreamDataFormatText" />
			<!-- <camel:json library="Jackson" id="OTStreamDataFormatJSON"/> -->
			<camel:custom ref="JSONDataFormat"  id="OTStreamDataFormatJSON"/>
			<camel:jaxb contextPath="org.helios.trace" id="OTStreamDataFormatXML"  />
			<camel:serialization id="OTStreamDataFormatJAVA" />
		</camel:dataFormats>
	  <route id="TopicTreeRepub" autoStartup="true" >
	    <from uri="activemq:queue:helios.agent.in.>"/>
	    <from uri="seda:otlocal?concurrentConsumers=2" id="OTLocalConsumer" />
	    <camel:split id="TopicTreeRepubSplitter" >
	    	<camel:method  id="splitter" bean="traceArraySplitter" method="split"/>
	    		<log message="A received:${body}"/>
	    			    	
		    	<camel:process ref="metaCache" id="metaCacheProcessor" />		    			    			    	
		    	
		    	<!-- <camel:process ref="traceHandler" id="traceHandlerConvert" /> -->
		    	<camel:bean ref="traceHandler" method="send" id="traceHandlerSend"/>
		    	<!-- The following fragment shows logging in JSON format -->
		    	
				<!-- 
		    	<camel:marshal id="OTJsonMarshall" >
		    		<camel:custom ref="OTXStreamDataFormatJSON"/>
		    	</camel:marshal>
    			
		    	
		    	<to uri="log:org.helios.ot?level=INFO&amp;multiline=true&amp;showAll=false&amp;showBodyType=false&amp;showExchangePattern=false"/>
				
				 -->		    	
		    	<!-- The following fragment shows logging in XML format -->
		    	<!-- 
		    	<camel:marshal id="xmlMarshall" >
		    		<camel:xstream encoding="UTF-8" />
		    	</camel:marshal>
		    	<to uri="log:org.helios.ot?level=INFO"/>
		    	-->
		    	
	    </camel:split>
	  </route>
	  
	  <route id="MetricSubListener" trace="true"  >
		<from uri="activemq:topic:ActiveMQ.Advisory.Consumer.Topic.helios.metrictree.>"/>
		<camel:process ref="subPatternListener" />
		<!-- 
		<convertBodyTo type="java.lang.String"/>
   			<transform>
      			<simple>${in.header.JMSDestination}&#13;</simple>
   			</transform>
		
		<to uri="log:org.helios.ot.advisory?level=INFO"/>
		<camel:process ref="subPatternListener" /> -->
			  
	  </route>
	  
	</camelContext>
	
  	<bean name="PollingHttpSubscriptionProcessor" class="org.helios.server.ot.session.camel.routing.http.PollingHttpSubscriptionProcessor" scope="prototype" lazy-init="true">
  		<constructor-arg type="java.lang.String" ><null/></constructor-arg>
  		<constructor-arg type="org.helios.server.ot.session.OutputFormat"><null/></constructor-arg>
  		<property name="queueLimit" value="50" />  		
  	</bean>

	<bean name="HttpSubscriptionRouter" class="org.helios.server.ot.session.camel.routing.http.HttpSubscriptionRouter" scope="prototype" lazy-init="true">
  		<constructor-arg type="java.lang.String"><null/></constructor-arg>
  		<constructor-arg type="java.lang.String"><null/></constructor-arg>
  		<constructor-arg type="org.helios.server.ot.session.OutputFormat"><null/></constructor-arg>
  		<property name="completionSize" value="5" />
  		<property name="completionTimeout" value="3000" />	
	</bean>	    


</beans>

