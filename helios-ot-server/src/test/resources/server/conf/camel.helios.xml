<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jms="http://www.springframework.org/schema/jms"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xmlns:lang="http://www.springframework.org/schema/lang"       
       xsi:schemaLocation="
       http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms.xsd
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
       http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang.xsd
       "  >
	
	<bean id="traceFormatter" class="org.apache.camel.processor.interceptor.DefaultTraceFormatter">
		<property name="showProperties" value="true"/>
		<property name="showHeaders" value="true"/>
		<property name="showRouteId" value="true" />
	</bean>
	
	<camel:threadPool id="MetricInputStreamThreadPool" poolSize="5" threadName="MetricInputStreamThread"  maxPoolSize="10" maxQueueSize="1000" />
	
	<context:annotation-config/>
	<context:mbean-export/>
	
  	
  	
  	
	<bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent">
      <property name="brokerURL" value="vm://helios?create=false"/>
   	</bean>

	
      
   	
   	
   	
   	

   	<bean id="traceArraySplitter" class="org.helios.server.ot.jms.pubsub.TraceMessageSplitter" />

	<bean id="subPatternListener" class="org.helios.server.ot.jms.pubsub.SubListener" />
   	
   	<bean id="traceHandler" class="org.helios.server.ot.jms.pubsub.TopicTreeRepublisher">
   		<constructor-arg ref="senderTemplate" />
   		<constructor-arg value="helios.metrictree" />
   		<constructor-arg value="activemq:topic" />
   	</bean>
   	
   	<bean id="OTLocalEndpoint" class="org.helios.server.ot.endpoint.local.LocalEndpoint">   		
   		<constructor-arg value="seda:otlocal" />
   	</bean>
   	
   	<bean id="senderTemplate" class="org.apache.camel.impl.DefaultProducerTemplate" init-method="start" destroy-method="stop" >
   		<constructor-arg ref="HeliosContext"/>
   		<constructor-arg ref="MetricInputStreamThreadPool"/>
   	</bean>
   	
   	<bean id="metaCache" class="org.helios.server.ot.cache.MetaCacheProcessor" depends-on="ehcache" />
   	<bean id="jsonDriver" class="com.thoughtworks.xstream.io.json.JsonHierarchicalStreamDriver"/>
   	<bean id="jettisonDriver" class="com.thoughtworks.xstream.io.json.JettisonMappedXmlDriver"/>
   	
   	
	
	<bean id="SubscriberRouteRegistry" class="org.helios.server.ot.session.camel.routing.SubscriberRouteRegistry" lazy-init="true" depends-on="heliosAmqBroker" >

	</bean>
	
	<bean id="RemoteRelay" class="org.helios.server.ot.endpoint.local.RemoteRelay">
		<property name="endpoint" ref="IntroscopeEndpoint"/>
	</bean>
	<!-- 
	<util:constant static-field="org.helios.server.ot.session.OutputFormatNames.TEXT_NAME" id="OUTPUT_TEXT" />
	<util:constant static-field="org.helios.server.ot.session.OutputFormatNames.JSON_NAME" id="OUTPUT_JSON" />
	<util:constant static-field="org.helios.server.ot.session.OutputFormatNames.XML_NAME" id="OUTPUT_XML" />
	<util:constant static-field="org.helios.server.ot.session.OutputFormatNames.JAVA_NAME" id="OUTPUT_JAVA" />	
	 -->   	
	 
	 <bean id="JSONDataFormat" class="org.helios.server.ot.session.camel.marshal.JaxbJsonMarshalingProvider" scope="singleton">
	 	<property name="replacers">
	 		<map>
	 			<entry key="javax.management.ObjectName">
	 				<bean id="JMXObjectNameReplacer" class="org.helios.server.ot.session.camel.marshal.custom.ObjectNameReplacer" />
	 			</entry>
	 		</map>
	 	</property>
	 </bean>
	 
	 <bean id="TraceCountWireTap" class="org.helios.server.ot.wiretaps.TraceCountWireTap" />

   	
	<camelContext xmlns="http://camel.apache.org/schema/spring" trace="false" id="HeliosContext" depends-on="SubscriberRouteRegistry"  autoStartup="true"  >
			
		<camel:threadPoolProfile id="MetricMulticastThreadPool" poolSize="5"  maxPoolSize="10" maxQueueSize="1000" />		
		
	
		<camel:dataFormats>
			<camel:string id="OTStreamDataFormatText" />
			<!-- <camel:json library="Jackson" id="OTStreamDataFormatJSON"/> -->
			<camel:custom ref="JSONDataFormat"  id="OTStreamDataFormatJSON"/>
			<camel:jaxb contextPath="org.helios.trace" id="OTStreamDataFormatXML"  />
			<camel:serialization id="OTStreamDataFormatJAVA" />
		</camel:dataFormats>
		
		<route id="OTAgentRoute" autoStartup="true" >
			<camel:description>The main input point for incoming agent metrics</camel:description>			
			<from uri="direct:agentin" id="OTAgentEndpoint"  />
		    <camel:split id="TopicTreeRepubSplitter" >
		    	<camel:method  id="splitter" bean="traceArraySplitter" method="split"/>
			    	<camel:process ref="metaCache" id="metaCacheProcessor" />		    			    			    	
			    	<camel:bean ref="traceHandler" method="send" id="traceHandlerSend"/>
		    </camel:split>
		</route>
		
		
		
	  <route id="AMQAgentListener" autoStartup="true" >	  	
	    <from uri="activemq:queue:helios.agent.in.>" id="OTAMQConsumer" />	    
	    <to id="AMQOTProcessor" uri="direct:agentin" />
	  </route>
	  
	  <route id="LocalAgentListener" autoStartup="true" >	  	
	    <from uri="seda:otlocal?concurrentConsumers=2" id="OTLocalConsumer" />
	    <to id="LocalOTProcessor" uri="direct:agentin" />
	  </route>
	  
	  <route id="RemoteTraceSubmissionHandler" autoStartup="true" >
	  	<from uri="direct:start" id="RemoteTraceSubmissionHandlerStart" />
		<camel:multicast id="RemoteTraceMulticast" parallelProcessing="true" executorServiceRef="MetricInputStreamThreadPool" >
			<camel:to id="RemoteOTProcessor" uri="direct:agentin" />			
			<to id="RemoteOTRelay" uri="bean:RemoteRelay"/>			
		</camel:multicast>	  	
	  </route>
	  
	  <route id="NettyTCPAgentListener" autoStartup="true" >	 
	  	<camel:description>The connection endpoint for remote Helios Agents using TCP</camel:description> 	
	    <from uri="netty:tcp://0.0.0.0:9428?decoders=#object-decoder&amp;encoders=#object-encoder&amp;sync=true" id="NettyTCPOTConsumer" />
	    <to uri="bean:HeliosProtocolServerInvoker" id="HeliosProtocolServerInvoker"  />
	  </route>
	  
	  
	  
	  
	  <!-- Needs enhanced camel-netty 2.9.1 with support for local channel -->
	  <!-- 
	  <route id="NettyHTTPAgentListener" autoStartup="true" >	  	
	  	<camel:description>The connection endpoint for remote Helios Agents using HTTP</camel:description>
	    <from uri="netty:local://0.0.0.0:0?decoders=#object-decoder&amp;encoders=#object-encoder&amp;sync=true" id="NettyHTTPOTConsumer" />
	    <camel:multicast id="NettyHTTPMulticast" parallelProcessing="true" executorServiceRef="MetricInputStreamThreadPool" >	 
		    <camel:to id="NettyHTTPOTProcessor" uri="direct:agentin" />
		    <camel:to id="NettyHTTPOTRelay" uri="bean:RemoteRelay"/>		    	    
	    </camel:multicast>
	    <camel:to uri="bean:TraceCountWireTap" /> 	
	  </route>
	  -->
	  
	  
	  <route id="NettyUDPAgentListener" autoStartup="true" >	
	  	<camel:description>The connection endpoint for remote Helios Agents using UDP</camel:description>  	
	    <from uri="netty:udp://0.0.0.0:9427?decoders=#object-decoder&amp;encoders=#object-encoder&amp;sync=true" id="NettyUDPOTConsumer" />
	    <camel:multicast id="NettyUDPMulticast" parallelProcessing="true" executorServiceRef="MetricInputStreamThreadPool" >	 
		    <camel:to id="NettyUDPOTProcessor" uri="direct:agentin" />
		    <camel:to id="NettyUDPOTRelay" uri="bean:RemoteRelay"/>		    
	    </camel:multicast>
	    <camel:to uri="bean:TraceCountWireTap" />
	  </route>
	  
		<!-- 
	  <route id="NettyAgentDiscoveryListener" autoStartup="true" >	  	
	    <camel:from uri="netty:udp://224.1.2.3:0?decoders=#object-decoder&amp;encoders=#object-encoder&amp;sync=false&amp;broadcast=true" id="NettyDiscoveryConsumer" />
	    <camel:to uri="netty:udp://224.1.2.3:0?decoders=#object-decoder&amp;encoders=#object-encoder&amp;sync=false&amp;broadcast=true" id="NettyDiscoveryProducer" />
	  </route>
		 -->	  
	  
	  <route id="MetricSubListener" trace="true"  >
		<from uri="activemq:topic:ActiveMQ.Advisory.Consumer.Topic.helios.metrictree.>"/>
		<camel:process ref="subPatternListener" />
	  </route>
    	
	</camelContext>
	
	<bean id="object-decoder" class="org.jboss.netty.handler.codec.serialization.ObjectDecoder"/>
	<!-- <bean id="object-encoder" class="org.jboss.netty.handler.codec.serialization.ObjectEncoder"/> -->
	<bean id="object-encoder" class="org.helios.server.ot.listener.helios.protocol.InvocationResponseHandler"/>
	
	
	
	<bean id="HeliosDiscoveryService" class="org.helios.server.ot.net.discovery.HeliosDiscoveryService" init-method="start" destroy-method="stop">
		<property name="network" value="224.9.3.7" />
		<property name="port" value="1836" />
	</bean>
	
	<bean id="HeliosProtocolServerInvoker" class="org.helios.server.ot.listener.helios.protocol.HeliosProtocolServerInvoker" />
	
  	<bean name="PollingHttpSubscriptionProcessor" class="org.helios.server.ot.session.camel.routing.http.PollingHttpSubscriptionProcessor" scope="prototype" lazy-init="true">
  		<constructor-arg type="java.lang.String" ><null/></constructor-arg>
  		<constructor-arg type="org.helios.server.ot.session.OutputFormat"><null/></constructor-arg>
  		<property name="queueLimit" value="50" />  		
  	</bean>

	<bean name="HttpSubscriptionRouter" class="org.helios.server.ot.session.camel.routing.http.HttpSubscriptionRouter" scope="prototype" lazy-init="true">
  		<constructor-arg type="java.lang.String"><null/></constructor-arg>
  		<constructor-arg type="java.lang.String"><null/></constructor-arg>
  		<constructor-arg type="org.helios.server.ot.session.OutputFormat"><null/></constructor-arg>
  		<property name="completionSize" value="5" />
  		<property name="completionTimeout" value="3000" />	
	</bean>	    


</beans>

