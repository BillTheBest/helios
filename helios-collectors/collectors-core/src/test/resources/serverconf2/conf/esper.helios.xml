<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

	<bean id="Engine" class="org.helios.esper.engine.Engine"
		init-method="start" destroy-method="stop">
		<property name="objectName" value="org.helios.esper:service=Engine" />
		<property name="configuration">
			<bean id="EngineConfiguration" class="com.espertech.esper.client.Configuration" />
		</property>
		<property name="variables">
			<map>
				<entry key="Period" value="30" />
			</map>
		</property>
		<property name="notificationThreadPool" ref="NotificationThreadPool" />
		<property name="aliases">
			<map>
				<entry key="Trace" value="org.helios.tracing.trace.Trace" />
				<entry key="Metric" value="org.helios.tracing.Metric" />
				<entry key="MetricName" value="org.helios.esper.engine.MetricName" />
				<entry key="InactiveMetric" value="org.helios.esper.engine.MetricName" />
			</map>
		</property>
		<property name="statements">
			<map>
				<entry key="UniqueMetricNameWindow"
					value="create window MetricNameCatalog.win:keepall() as select fullName, metricName, typeName, typeCode from MetricName" />
				<entry key="UniqueMetricNameWindowPopulate"
					value="insert into MetricNameCatalog select  fullName, name as metricName, metricType.name as typeName, metricType.code as typeCode from Trace.std:unique(name)" />
				<entry key="UniqueMetricNameWindowSelect" value="select istream * from MetricNameCatalog" />
				<entry key="LastMetricWindow"
					value="create window LastMetrics.std:unique(fullName) as select fullName, metricName, typeName, typeCode, lastReceivedTime from MetricName" />
				<!-- .std:groupby(fullName).std:lastevent() -->
				<entry key="UpdateMetricWindow"
					value="insert into LastMetrics select fullName, name as metricName, metricType.name as typeName, metricType.code as typeCode, current_timestamp as lastReceivedTime from Trace.std:lastevent().win:time_batch(30 sec) group by fullName" />
				<entry key="InactiveMetrics"
					value="on pattern [every timer:interval(5 sec)] select * from LastMetrics where current_timestamp > (lastReceivedTime+30000) " />
				<entry key="DeleteInactiveMetrics"
					value="on pattern [every timer:interval(10 sec)] delete from MetricNameCatalog as mnc where exists (select fullName from LastMetrics where current_timestamp > (lastReceivedTime+30000) and fullName = mnc.fullName)" />

			</map>
		</property>
		<property name="listeners">
			<set>
				<ref bean="MetricNameCatalog" />
			</set>
		</property>

		<property name="metricsEnabled" value="true" />
	</bean>

	<bean id="MetricNameCatalog" init-method="start"
		class="org.helios.esper.engine.MetricNameCatalog">
		<constructor-arg value="Helios Metric Name Catalog" />
		<property name="targetStatements" value="UniqueMetricNameWindowSelect,InactiveMetrics" />
		<property name="MBeanServer" ref="MBeanServer" />
		<property name="objectName"
			value="org.helios.tracing.server:service=MetricNameCatalog" />
	</bean>

	<bean id="OnDemmandProcessor"
		class="org.helios.esper.engine.service.interactive.OnDemmandProcessor"
		init-method="init">
		<constructor-arg ref="Engine" />
	</bean>
	
     <bean id="NotificationThreadPool"
                class="org.helios.jmx.threadservices.JMXManagedThreadPoolService" init-method="start" destroy-method="stop">
                <property name="corePoolSize" value="2"/>
                <property name="maxPoolSize" value="5"/>
                <property name="discardOldest" value="true"/>
                <property name="instrumentationEnabled" value="true"/>
                <property name="daemonThreads" value="true" />
                <property name="objectName" value="org.helios.esper:service=NotificationThreadPool" />
                <property name="prestartThreads" value="1" />
                <property name="queueCapacity" value="100" />
                <property name="taskInstrumentationEnabled" value="true" />
                <property name="threadGroupName" value="NotificationThreadGroup" />
                <property name="threadNamePrefix" value="NotificationThread" />                
     </bean>
	



</beans>
