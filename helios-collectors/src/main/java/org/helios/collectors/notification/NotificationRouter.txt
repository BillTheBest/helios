/**
 * Helios, OpenSource Monitoring
 * Brought to you by the Helios Development Group
 *
 * Copyright 2007, Helios Development Group and individual contributors
 * as indicated by the @author tags. See the copyright.txt file in the
 * distribution for a full listing of individual contributors.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org. 
 *
 */
package org.helios.collectors.notification;

import javax.jms.Connection;
import javax.jms.DeliveryMode;
import javax.jms.Destination;
import javax.jms.JMSException;
import javax.jms.MessageProducer;
import javax.jms.ObjectMessage;
import javax.jms.Session;
import javax.management.Notification;

import org.apache.activemq.ActiveMQConnectionFactory;
import org.apache.log4j.Logger;

import com.sdicons.json.model.JSONValue;

/**
 * <p>Title: NotificationRouter</p>
 * <p>Description: This class implements logic to:
 *  1. Transform jmx notification to formats requested by Helios agents
 *  2. Push that information to those agents through requested adapters (RMI,JMS etc.)</p> 
 * <p>Company: Helios Development Group</p>
 * @author Sandeep Malhotra (smalhotra@heliosdev.org)
 *
 *  ///  NEED TO REMOVE DEPENDENCY ON ACTIVEMQ
 *  ///  AND REF JMS GENERICALLY
 *
 */
public class NotificationRouter implements Runnable{
	protected Logger log = Logger.getLogger(NotificationRouter.class);
	protected Notification notification = null;
	protected Object handback = null;
	
	NotificationRouter(Notification notification, Object handback){
		this.notification = notification;
		this.handback = handback;
	}
	
	/**
	 * 
	 * @param notification
	 */
    public void publishNotification(){
    	JSONValue json=null;
    	ActiveMQConnectionFactory connectionFactory = null;
    	Connection connection = null;
    	Session session = null;
    	Destination destination = null;
    	MessageProducer producer = null;
    	
        try {
    		json = NotificationMarshaller.toJSON(notification);
    		log.info(json.render(true));
    		log.info("**********************************************************************");
    		log.info(NotificationMarshaller.toString(notification));
        	//@ TODO Need to externalize hard coded values to config file when it's moved to appropriate adapter class
            connectionFactory = new ActiveMQConnectionFactory("tcp://localhost:6121");
            connection = connectionFactory.createConnection();
            connection.start();
            session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
            destination = session.createQueue("helios.collector.notifications");
            producer = session.createProducer(destination);
            producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
            ObjectMessage message = session.createObjectMessage(json.render(true));
            producer.send(message);
        }catch(NotificationMarshallerException hmex){
    		log.error("An error occured while marshalling jmx notification to JSON.",hmex);
    	}catch (Exception ex) {
            log.error("An error occured while publishing notification to Helios Agent adapters",ex);
        }finally{
        	try{
	            if(session!=null)
	            	session.close();
	            if(connection!=null)
	            	connection.close();
        	}catch(JMSException jmsex){
        		//Ignore Exception
        	}
        }
    }

	public void run() {
		//@ TODO Currently a call is made to local publishNotification method, however this will soon be 
		// replaced with calls to appropriate adapters based on Agent's preference.
		publishNotification();
		
	}
}
