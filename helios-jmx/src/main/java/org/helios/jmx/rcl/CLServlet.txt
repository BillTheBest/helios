/**
 * Helios, OpenSource Monitoring
 * Brought to you by the Helios Development Group
 *
 * Copyright 2007, Helios Development Group and individual contributors
 * as indicated by the @author tags. See the copyright.txt file in the
 * distribution for a full listing of individual contributors.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org. 
 *
 */
package org.helios.jmx.rcl;

import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.net.URL;
import java.util.Properties;
import java.util.Set;

import javassist.ClassPool;
import javassist.CtClass;

import javax.management.MBeanRegistration;
import javax.management.MBeanServer;
import javax.management.MBeanServerConnection;
import javax.management.ObjectName;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.helios.helpers.FileHelper;
import org.helios.helpers.JMXHelper;
import org.helios.helpers.JMXHelperExtended;
import org.mortbay.jetty.Server;
import org.mortbay.jetty.nio.SelectChannelConnector;
import org.mortbay.jetty.webapp.WebAppContext;



/**
 * <p>Title: CLServlet</p>
 * <p>Description: Servlet to provide class loading for the ReverseClassLoader</p> 
 * <p>Company: Helios Development Group</p>
 * @author Whitehead (whitehead.nicholas@gmail.com)
 * @version $LastChangedRevision$
 * <p><code>org.helios.jmx.rcl.CLServlet</p></code>
 */
public class CLServlet extends HttpServlet implements MBeanRegistration, CLServletMBean {
	
	protected MBeanServer server = null;
	protected ObjectName on = JMXHelper.objectName("org.helios.jmx:type=Servlet,name=CLServlet");
	protected static String mletText = null;
	protected static byte[] iniJar = null;
	
	static {
		try {
			mletText = new String(FileHelper.getBytesFromUrl(new URL("file:./conf/bootmlet.txt")));
			iniJar = FileHelper.getBytesFromUrl(new URL("file:./dist/rcl/plugins/mletinit.jar"));
			olog(mletText);
		} catch (Exception e) {
			e.printStackTrace();
			throw new RuntimeException();
		}
	}
	
	/**  */
	private static final long serialVersionUID = 6561516160772161171L;
	
	/**
	 * Initializes the servlet
	 * @see javax.servlet.GenericServlet#init()
	 */
	public void init() throws ServletException  {
		super.init();
		server = JMXHelperExtended.getHeliosMBeanServer();
	}
	
	/**
	 * Services all requests to the mapped URI
	 * @param req the servlet request
	 * @param res the servlet response
	 * @see javax.servlet.http.HttpServlet#service(javax.servlet.ServletRequest, javax.servlet.ServletResponse)
	 */
	public void service(HttpServletRequest req, HttpServletResponse res) throws IOException, ServletException  {

		BufferedOutputStream out = null;

		try {
			String path = req.getPathInfo();
			System.out.println("Requested [" + path + "]"); // dude
			ByteArrayOutputStream baos = new ByteArrayOutputStream(); 
			if("/mlet".equalsIgnoreCase(path)) {
				baos.write(mletText.getBytes());
			} else if("/mletinit.jar".equalsIgnoreCase(path)) {
				baos.write(mletText.getBytes());

			} else {
				ClassPool cp = ClassPool.getDefault();
				String className = path.replaceFirst("\\/", "");
				log("Request for Class [" + className + "]");
				CtClass clazz   = cp.get(className);
				baos.write(clazz.toBytecode());
				baos.flush();
			}
			out = new BufferedOutputStream(res.getOutputStream());
			out.write(baos.toByteArray());
			out.close();
		} catch (Exception e) {
			log("Failed to process request:" + e);
		}
		
	}
	/**
	 * Parameterless Constructor 
	 */
	public CLServlet() {
	}



	/**
	 * Allows the MBean to perform any operations needed after having been unregistered in the MBean server.
	 * @see javax.management.MBeanRegistration#postDeregister()
	 */
	public void postDeregister() {		
	}

	/**
	 * Allows the MBean to perform any operations needed after having been registered in the MBean server or after the registration has failed.
	 * @param registrationDone Indicates whether or not the MBean has been successfully registered in the MBean server. The value false means that the registration phase has failed.
	 * @see javax.management.MBeanRegistration#postRegister(java.lang.Boolean)
	 */
	public void postRegister(Boolean registrationDone) {
	}

	/**
	 * Allows the MBean to perform any operations it needs before being unregistered by the MBean server. 
	 * @throws Exception
	 * @see javax.management.MBeanRegistration#preDeregister()
	 */
	public void preDeregister() throws Exception {
	}



	/**
	 * Allows the MBean to perform any operations it needs before being registered in the MBean server. If the name of the MBean is not specified, the MBean can provide a name for its registration. If any exception is raised, the MBean will not be registered in the MBean server. 
	 * @param server The MBean server in which the MBean will be registered.
	 * @param on The object name of the MBean. This name is null if the name parameter to one of the createMBean or registerMBean methods in the MBeanServer  interface is null. In that case, this method must return a non-null ObjectName for the new MBean. 
	 * @return The name under which the MBean is to be registered. This value must not be null. If the name  parameter is not null, it will usually but not necessarily be the returned value. 
	 * @throws Exception
	 * @see javax.management.MBeanRegistration#preRegister(javax.management.MBeanServer, javax.management.ObjectName)
	 */
	public ObjectName preRegister(MBeanServer server, ObjectName on) 	throws Exception {
		return on;
	}
	
	
	
	public static void main(String[] args) {
		try {
			Server server = new Server();
			SelectChannelConnector nio = new SelectChannelConnector();
			nio.setHost("0.0.0.0");
			nio.setPort(9090);
			server.addConnector(nio);
			WebAppContext handler = new WebAppContext();
			handler.setContextPath("/");
			handler.setWar("./conf/reverseclassloader/rcl.war");
			server.setHandler(handler);
//			ServletHandler handler = new ServletHandler();
//			ServletHolder sh = handler.addServlet(CLServlet.class.getName(), "/*");
//			server.setHandler(handler);			
			server.start();
			olog("Server Started:" + server);
			Properties p = new Properties();
			Context ctx = null;
			p.setProperty(Context.INITIAL_CONTEXT_FACTORY, "org.jnp.interfaces.NamingContextFactory");
			p.setProperty(Context.PROVIDER_URL, "127.0.0.1:1099");
			ctx = new InitialContext(p);
			MBeanServerConnection rmi = (MBeanServerConnection)ctx.lookup("jmx/rmi/RMIAdaptor");
			ObjectName  bootStrapPhase1 = new ObjectName("helios.rcl:type=ClassLoader,name=Phase1,host=localhost,port=9090");
			ObjectName  bootStrapPhase2 = new ObjectName("helios.rcl:type=ClassLoader,name=Phase2,host=localhost,port=9090");
			ObjectName  jmiClassLoader = new ObjectName("JMImplementation:name=Default,service=LoaderRepository");
			
			
			URL rcl = new URL("http://localhost:9090/" + BootStrapRemoteClassLoader.class.getName());
			URL rclMbean = new URL("http://localhost:9090/" + BootStrapRemoteClassLoaderMBean.class.getName());
			
			try { rmi.invoke(jmiClassLoader, "newClassLoader", new Object[]{rcl, true}, new String[]{URL.class.getName(), boolean.class.getName()}); } catch (Exception e) {}
			try { rmi.invoke(jmiClassLoader, "newClassLoader", new Object[]{rclMbean, true}, new String[]{URL.class.getName(), boolean.class.getName()}); } catch (Exception e) {}
			
			if(rmi.isRegistered(bootStrapPhase1)) {
				rmi.unregisterMBean(bootStrapPhase1);
			}
			URL[] urls = new URL[] {rcl, rclMbean};
			//rmi.createMBean("javax.management.loading.MLet", bootStrapPhase1, new Object[]{urls, true}, new String[]{URL[].class.getName(), boolean.class.getName()});
			//rmi.createMBean("javax.management.loading.MLet", bootStrapPhase1, new Object[]{urls}, new String[]{URL[].class.getName()});
			//rmi.createMBean("javax.management.loading.MLet", bootStrapPhase1, new Object[]{new URL[]{}}, new String[]{URL[].class.getName()});
			rmi.createMBean("javax.management.loading.MLet", bootStrapPhase1, new Object[]{}, new String[]{});
			
			rmi.invoke(bootStrapPhase1, "addURL", new Object[]{"http://localhost:9090/org.helios.jmx.rcl.BootStrapRemoteClassLoader"}, new String[]{String.class.getName()});
			rmi.invoke(bootStrapPhase1, "addURL", new Object[]{"http://localhost:9090/org.helios.jmx.rcl.BootStrapRemoteClassLoaderMBean"}, new String[]{String.class.getName()});
			rmi.invoke(bootStrapPhase1, "addURL", new Object[]{"http://localhost:9090/mletinit.jar"}, new String[]{String.class.getName()});
			
			if(rmi.isRegistered(bootStrapPhase2)) {
				rmi.unregisterMBean(bootStrapPhase2);
			}
			
			//rmi.createMBean(BootStrapRemoteClassLoader.class.getName(), bootStrapPhase2,bootStrapPhase1,  new Object[]{"localhost", 9090}, new String[]{String.class.getName(), int.class.getName()});
			rmi.createMBean(BootStrapRemoteClassLoader.class.getName(), bootStrapPhase2,  new Object[]{"localhost", 9090}, new String[]{String.class.getName(), int.class.getName()});
			olog("Loaded Phase 2");
			
			Set<?> ret = (Set<?>)rmi.invoke(bootStrapPhase1, "getMBeansFromURL", new Object[]{"http://localhost:9090/mlet"}, new String[]{String.class.getName()});
			for(Object obj: ret) {
				olog("Ret:" + obj.getClass().getName() + ":" + ret);
				if(obj instanceof Exception) {
					((Exception)obj).printStackTrace(System.err);
				}
			}
			
			//rmi.createMBean(BootStrapRemoteClassLoader.class.getName(), bootStrapPhase2,bootStrapPhase1,  new Object[]{"localhost", 9090}, new String[]{String.class.getName(), int.class.getName()}); 
			//rmi.createMBean(BootStrapRemoteClassLoader.class.getName(), bootStrapPhase2,  new Object[]{"localhost", 9090}, new String[]{String.class.getName(), int.class.getName()});
		} catch (Exception e) {
			e.printStackTrace(System.err);
			System.exit(0);
		}
	}
	
	public static void olog(Object o) {
		System.out.println(o);
	}

}
