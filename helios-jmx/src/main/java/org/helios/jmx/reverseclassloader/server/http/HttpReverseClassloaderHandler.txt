/**
 * Helios, OpenSource Monitoring
 * Brought to you by the Helios Development Group
 *
 * Copyright 2007, Helios Development Group and individual contributors
 * as indicated by the @author tags. See the copyright.txt file in the
 * distribution for a full listing of individual contributors.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org. 
 *
 */
package org.helios.jmx.reverseclassloader.server.http;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.Enumeration;
import java.util.Map;
import java.util.Map.Entry;

import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.helios.helpers.FileHelper;
import org.helios.helpers.StringHelper;
import org.mortbay.jetty.Server;
import org.mortbay.jetty.handler.AbstractHandler;
import org.omg.CORBA_2_3.portable.OutputStream;


/**
 * <p>Title: HttpReverseClassloaderHandler</p>
 * <p>Description: Http Class and MLet server for reverse class loading.</p> 
 * <p>Company: Helios Development Group</p>
 * @author Whitehead (whitehead.nicholas@gmail.com)
 * @version $LastChangedRevision$
 * $HeadURL$
 * $Id$
 */
public class HttpReverseClassloaderHandler extends AbstractHandler {
	protected Logger log = Logger.getLogger(getClass());
	protected File baseDirectory = null;
	protected String hostName = "0.0.0.0";
	protected int port = 7776;
	protected static Server server = null;
	protected static Object lock = new Object();
	
	/**
	 * @throws Exception 
	 * 
	 */
	public HttpReverseClassloaderHandler(String baseDirName) throws Exception {
		baseDirectory = new File(baseDirName);
		if(!baseDirectory.exists()) {
			throw new Exception("Base Directory [" + baseDirName + "] does not exist");
		} else {
			if(!baseDirectory.isDirectory()) {
				throw new Exception("Base Directory [" + baseDirName + "] is not a directory.");
			}
		}	
		startServer();
	}
	
	public static void init(String baseDir) throws Exception {
		if(server==null) {
			synchronized(lock) {
				if(server==null) {
					HttpReverseClassloaderHandler handler = new HttpReverseClassloaderHandler(baseDir);
				}
			}
		}
	}
	
	/**
	 * Starts the http reverse class loader server.
	 * @throws Exception
	 */
	public void startServer() throws Exception {
		server = new Server(port);
		server.setHandler(this);
		server.start();
		log.info("Http Reverse Classloader Started");
	}


	/**
	 * Handles a reverse class loader request. 
	 * @param target
	 * @param request
	 * @param response
	 * @param dispatch
	 * @throws IOException
	 * @throws ServletException
	 * @see org.mortbay.jetty.Handler#handle(java.lang.String, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, int)
	 */
	public void handle(String target, HttpServletRequest request, HttpServletResponse response, int dispatch) throws IOException, ServletException {
		//if(true) {
			StringBuilder buff = new StringBuilder();
			buff.append("ReverseClassLoader Request.");
			buff.append("\n\tTarget:").append(target);
			buff.append("\n\tLocal Port:").append(request.getLocalPort());
			buff.append("\n\tRemote Port:").append(request.getRemotePort());
			buff.append("\n\tServer Port:").append(request.getServerPort());
			buff.append("\n\tContext Path:").append(request.getContextPath());
			buff.append("\n\tContent Type:").append(request.getContentType());
			Map<String, String[]> params = request.getParameterMap();
			buff.append("\n\tParameters:[" + params.size() + "]");
			for(Entry<String, String[]> entry: params.entrySet()) {
				buff.append("\n\t\t").append(entry.getKey()).append(":").append(entry.getValue());
			}			
			buff.append("\n\tHeaders:");
			for(Enumeration henum = request.getHeaderNames(); henum.hasMoreElements();) {
				String headerName = henum.nextElement().toString();
				buff.append("\n\t\t").append(headerName).append(":").append(request.getHeader(headerName));
				
			}			
			buff.append("\n\tRequest Length:").append(request.getContentLength());	
			log.debug(buff.toString());
		//}
			String mletTxt = null;
			

			InputStream is = request.getInputStream();
			ByteArrayOutputStream baos = new ByteArrayOutputStream();
			byte[] byteBuffer = new byte[1024];
			while(true) {
				int size = is.read(byteBuffer);
				if(size==-1) break;
				baos.write(byteBuffer, 0, size);
			}
			log.info("Read [" + baos.size() + "] bytes");
			                             
			String lib = request.getParameter("lib");
			if(lib==null) {
				response.setStatus(HttpServletResponse.SC_OK);
				return;
			}
			StringBuilder mletUrlStr = new StringBuilder(baseDirectory.toURL().toString() +  lib);
			URL url = new URL(mletUrlStr.toString());
			log.info("Reverse Loading [" + url.toString() + "]");
			response.setStatus(HttpServletResponse.SC_OK);
			byte[] jar = FileHelper.getBytesFromUrl(url);
			ServletOutputStream os = response.getOutputStream();
			os.write(jar);
			os.flush();
			os.close();
			
			
		
	}

}
