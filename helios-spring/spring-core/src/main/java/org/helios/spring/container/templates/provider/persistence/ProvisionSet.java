package org.helios.spring.container.templates.provider.persistence;

// Generated Sep 4, 2009 3:51:26 PM by Hibernate Tools 3.2.4.GA

import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.Map.Entry;
import java.util.concurrent.atomic.AtomicInteger;

import org.helios.helpers.StringHelper;
import org.helios.spring.container.templates.provider.ITemplateProvision;

/**
 * ProvisionSet generated by hbm2java
 */
public class ProvisionSet implements java.io.Serializable, ITemplateProvision {

	private int provisionSetId;
	private Provision provision;
	private String provisionSetName;
	private Map<String, Object> provisionValues = new HashMap<String, Object>(0);
	protected static final AtomicInteger serial = new AtomicInteger(0);

	public ProvisionSet() {
	}
	
	public int getProvisionId() {
		return provisionSetId;
	}

	public ProvisionSet(int provisionSetId, Provision provision,
			String provisionSetName) {
		this.provisionSetId = provisionSetId;
		this.provision = provision;
		this.provisionSetName = provisionSetName;
	}
	
	/**
	 * For non-DB instances.
	 * @param provision
	 * @param provisionSetName
	 */
	public ProvisionSet(Provision provision,
			String provisionSetName) {
		this.provisionSetId = serial.incrementAndGet();
		this.provision = provision;
		this.provisionSetName = provisionSetName;
	}	
	
	/**
	 * For non-DB instances.
	 * @param provision
	 * @param provisionSetName
	 * @param provisionValues
	 */
	public ProvisionSet(String provisionSetName, Map<String, Object> provisionValues) {
		this.provisionSetId = serial.incrementAndGet();
		this.provisionSetName = provisionSetName;
		this.provisionValues = provisionValues;
	}	

	public ProvisionSet(int provisionSetId, Provision provision,
			String provisionSetName, Map<String, Object> provisionValues) {
		this.provisionSetId = provisionSetId;
		this.provision = provision;
		this.provisionSetName = provisionSetName;
		this.provisionValues = provisionValues;
	}
	
	protected void flattenArrays() {
		for(Map.Entry<String, Object> e: this.provisionValues.entrySet()) {
			if(e.getValue().getClass().isArray()) {
				int length = Array.getLength(e.getValue());
				if(length==0) e.setValue("");
				else if(length==1) e.setValue(Array.get(e.getValue(), 0));
			}
		}		
	}

	public int getProvisionSetId() {
		return this.provisionSetId;
	}

	public void setProvisionSetId(int provisionSetId) {
		this.provisionSetId = provisionSetId;
	}

	public Provision getProvision() {
		return this.provision;
	}

	public void setProvision(Provision provision) {
		this.provision = provision;
	}

	public String getProvisionSetName() {
		return this.provisionSetName;
	}

	public void setProvisionSetName(String provisionSetName) {
		this.provisionSetName = provisionSetName;
	}

	public Map<String, Object> getProvisionValues() {
		return this.provisionValues;
	}

	public void setProvisionValues(Map<String, Object> provisionValues) {
		this.provisionValues = provisionValues;
	}

	/**
	 * Constructs a <code>String</code> with all attributes in name = value format.
	 * @return a <code>String</code> representation of this object.
	 */
	public String toString()  {
	    final String TAB = "\n\t";
	    StringBuilder retValue = new StringBuilder("ProvisionSet [");
	    retValue.append(TAB).append("provision=").append(this.provision.getProvisionName()).append("(").append(this.provision.getProvisionId()).append(")");
	    retValue.append(TAB).append("provisionSet=").append(this.provisionSetName).append("(").append(this.provisionSetId).append(")");
	    retValue.append(TAB).append("provisionValues [");
	    for(Map.Entry<String, Object> e: provisionValues.entrySet()) {
	    	retValue.append(TAB).append("\t").append(e.getKey()).append("=").append(e.getValue());
	    }
	    retValue.append(TAB).append("]");
	    retValue.append("\n]");
	    return retValue.toString();
	}

	/**
	 * @param key
	 * @param value
	 * @see org.helios.spring.container.templates.provider.ITemplateProvision#addValue(java.lang.String, java.lang.Object)
	 */
	public void addValue(String key, Object value) {
		provisionValues.put(key, value);		
	}

	/**
	 * 
	 * @see org.helios.spring.container.templates.provider.ITemplateProvision#clear()
	 */
	public void clear() {
		provisionValues.clear();		
	}

	/**
	 * @param name
	 * @return
	 * @see org.helios.spring.container.templates.provider.ITemplateProvision#get(java.lang.String)
	 */
	public Object get(String name) {
		Object val = provisionValues.get(name);
		if(val==null) return null;
		if(val instanceof Collection) {
			val = ((Collection)val).toArray();
		}
		if(val.getClass().isArray()) {
			int length = Array.getLength(val);
			if(length==0) val = "";
			else if(length==1) val = Array.get(val, 0);
			else {
				Object[] arr = new Object[length];
				System.arraycopy(val, 0, arr, 0, length);
				val  = StringHelper.flattenArray(",", arr);
			}
		}		
		return val;
	}

	/**
	 * @param key
	 * @param index
	 * @return
	 * @see org.helios.spring.container.templates.provider.ITemplateProvision#get(java.lang.String, int)
	 */
	public Object get(String key, int index) {
		Object value = get(key);
		if(value==null || !value.getClass().isArray()) return null;
		try {
			return Array.get(value, index);
		} catch (Exception e) {
			return null;
		}		
	}

	/**
	 * @return
	 * @see org.helios.spring.container.templates.provider.ITemplateProvision#getEntrySet()
	 */
	public Set<Entry<String, Object>> getEntrySet() {
		return Collections.unmodifiableSet(provisionValues.entrySet());		
	}


	/**
	 * @return
	 * @see org.helios.spring.container.templates.provider.ITemplateProvision#getId()
	 */
	public String getId() {
		return this.provisionSetName;
	}

	/**
	 * @return
	 * @see org.helios.spring.container.templates.provider.ITemplateProvision#getKeys()
	 */
	public String[] getKeys() {
		return provisionValues.keySet().toArray(new String[provisionValues.size()]);
	}

	/**
	 * @return
	 * @see org.helios.spring.container.templates.provider.ITemplateProvision#getSize()
	 */
	public int getSize() {
		return provisionValues.size();
	}

	/**
	 * @param name
	 * @return
	 * @see org.helios.spring.container.templates.provider.ITemplateProvision#getSize(java.lang.String)
	 */
	public int getSize(String name) {
		Object value = get(name);
		if(value==null || !value.getClass().isArray()) return -1;
		try {
			return Array.getLength(value);
		} catch (Exception e) {
			return -1;
		}						
	}

	/**
	 * @param name
	 * @return
	 * @see org.helios.spring.container.templates.provider.ITemplateProvision#getValues(java.lang.String)
	 */
	public Object[] getValues(String name) {
		Object value = get(name);
		if(value==null || !value.getClass().isArray()) return null;
		int length = Array.getLength(value);
		Object[] ret = new Object[length];
		System.arraycopy(value, 0, ret, 0, length);
		return ret;		
	}

	/**
	 * @return
	 * @see org.helios.spring.container.templates.provider.ITemplateProvision#getValues()
	 */
	public Object[] getValues() {
		return provisionValues.values().toArray();
	}

	/**
	 * @param key
	 * @return
	 * @see org.helios.spring.container.templates.provider.ITemplateProvision#remove(java.lang.String[])
	 */
	public Map<String, Object> remove(String... key) {
		Map<String, Object> ret = new HashMap<String, Object>();
		if(key!=null && key.length > 0) {
			for(String s: key) {
				Object v = provisionValues.remove(s);
				if(v!=null) {
					ret.put(s, v);
				}
			}
		}
		return ret;
	}
	
}
